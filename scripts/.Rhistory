#      if(gene[i,1] != gene[i,2]){
#        x <- i
#      }
#    }
#    gene <- gene[x,1]
#  }else{
#    gene <- gene[[1]][1]
#  }
#  tmp <- data[data$tf == TF,]
#  tmp <- tmp[tmp$target == gene,]
#}
if (tmp[[5]] == "FALSE" && tmp[[7]] == "FALSE" && tmp[[8]] == "FALSE"){
Fonly_curated <- Fonly_curated + 1
}else if(tmp[[5]] =="TRUE"){
FChipseq <- FChipseq + 1
}else{
Fnot_only <- Fnot_only + 1
print(tmp)
}
}
FNs <- read.table("FNs", header = T)
FNss <- cbind(FNs[1], FNs[3], FNs[6])
FNss <- FNss[FNss$confidence == conf,]
Fonly_curated <- 0
Fnot_only <- 0
FChipseq <- 0
for (i in 1:nrow(FNss)){
TF <- FNss[i,1]
gene <- FNss[i,2]
tmp <- data[data$tf == TF,]
tmp <- tmp[tmp$target == gene,]
if (tmp[[5]] == "FALSE" && tmp[[7]] == "FALSE" && tmp[[8]] == "FALSE"){
Fonly_curated <- Fonly_curated + 1
}else{
Fnot_only <- Fnot_only + 1
}
}
FNs <- read.table("TPs", header = T)
FNss <- cbind(FNs[1], FNs[3], FNs[6])
FNss <- FNss[FNss$confidence == conf,]
Tonly_curated <- 0
Tnot_only <- 0
TChipseq <- 0
for (i in 1:nrow(FNss)){
print(i)
TF <- FNss[i,1]
gene <- FNss[i,2]
tmp <- data[data$tf == TF,]
tmp <- tmp[tmp$target == gene,]
if (tmp[[5]] == "FALSE" && tmp[[7]] == "FALSE" && tmp[[8]] == "FALSE"){
Tonly_curated <- Tonly_curated + 1
}else{
Tnot_only <- Tnot_only + 1
}
}
pie.sales <- c(Fonly_curated)
pie.sales <- append(pie.sales, Tonly_curated)
names(pie.sales) <- c("FN", "TP")
pdf( paste(conf, "_only_curated.pdf",sep=""), width=12, height=6 )
pie(pie.sales, main = "A only curated")
dev.off()
pie.sales <- c(Fnot_only)
pie.sales <- append(pie.sales, Tnot_only)
names(pie.sales) <- c("FN", "TP")
pdf( paste(conf, "_notOnly.pdf",sep=""), width=12, height=6 )
pie(pie.sales, main = "A not only curated")
dev.off()
conf <- "A"
FNs <- read.table("FNs", header = T)
FNss <- cbind(FNs[1], FNs[3], FNs[6])
FNss <- FNss[FNss$confidence == conf,]
Fonly_curated <- 0
Fnot_only <- 0
FChipseq <- 0
for (i in 1:nrow(FNss)){
TF <- FNss[i,1]
gene <- FNss[i,2]
tmp <- data[data$tf == TF,]
tmp <- tmp[tmp$target == gene,]
if (tmp[[5]] == "FALSE" && tmp[[7]] == "FALSE" && tmp[[8]] == "FALSE"){
Fonly_curated <- Fonly_curated + 1
}else{
Fnot_only <- Fnot_only + 1
}
}
FNs <- read.table("TPs", header = T)
FNss <- cbind(FNs[1], FNs[3], FNs[6])
FNss <- FNss[FNss$confidence == conf,]
Tonly_curated <- 0
Tnot_only <- 0
TChipseq <- 0
for (i in 1:nrow(FNss)){
print(i)
TF <- FNss[i,1]
gene <- FNss[i,2]
tmp <- data[data$tf == TF,]
tmp <- tmp[tmp$target == gene,]
if (tmp[[5]] == "FALSE" && tmp[[7]] == "FALSE" && tmp[[8]] == "FALSE"){
Tonly_curated <- Tonly_curated + 1
}else{
Tnot_only <- Tnot_only + 1
}
}
pie.sales <- c(Fonly_curated)
pie.sales <- append(pie.sales, Tonly_curated)
names(pie.sales) <- c("FN", "TP")
pdf( paste(conf, "_only_curated.pdf",sep=""), width=12, height=6 )
pie(pie.sales, main = "A only curated")
dev.off()
pie.sales <- c(Fnot_only)
pie.sales <- append(pie.sales, Tnot_only)
names(pie.sales) <- c("FN", "TP")
pdf( paste(conf, "_notOnly.pdf",sep=""), width=12, height=6 )
pie(pie.sales, main = "A not only curated")
dev.off()
for (conf in c("A", "B", "C", "D")){
print(conf)
}
# Chipseq有無におけるTP, FNの割合はどのくらいか？？
for (conf in c("A", "B", "C", "D")){
FNs <- read.table("FNs", header = T)
FNss <- cbind(FNs[1], FNs[3], FNs[6])
FNss <- FNss[FNss$confidence == conf,]
FChipseq <- 0
Fnot_Chipseq <- 0
for (i in 1:nrow(FNss)){
TF <- FNss[i,1]
gene <- FNss[i,2]
tmp <- data[data$tf == TF,]
tmp <- tmp[tmp$target == gene,]
if (tmp[[5]] == "TRUE"){
FChipseq <- FChipseq + 1
}else{
Fnot_Chipseq <- Fnot_Chipseq + 1
}
}
FNs <- read.table("TPs", header = T)
FNss <- cbind(FNs[1], FNs[3], FNs[6])
FNss <- FNss[FNss$confidence == conf,]
TChipseq <- 0
Tnot_Chipseq <- 0
for (i in 1:nrow(FNss)){
print(i)
TF <- FNss[i,1]
gene <- FNss[i,2]
tmp <- data[data$tf == TF,]
tmp <- tmp[tmp$target == gene,]
if (tmp[[5]] == "TRUE"){
Tonly_curated <- Tonly_curated + 1
}else{
Tnot_only <- Tnot_only + 1
}
}
pie.sales <- c(FChipseq)
pie.sales <- append(pie.sales, TChipseq)
names(pie.sales) <- c("FN", "TP")
pdf( paste(conf, "_Chipseq.pdf",sep=""), width=12, height=6 )
pie(pie.sales, main = paste(conf, "Chipseq", sep = ""))
dev.off()
pie.sales <- c(Fnot_Chipseq)
pie.sales <- append(pie.sales, Tnot_Chipseq)
names(pie.sales) <- c("FN", "TP")
pdf( paste(conf, "_notChipseq.pdf",sep=""), width=12, height=6 )
pie(pie.sales, main = paste(conf, "not_Chipseq", sep = ""))
dev.off()
}
# Chipseq有無におけるTP, FNの割合はどのくらいか？？
for (conf in c("A", "B", "C", "D")){
FNs <- read.table("FNs", header = T)
FNss <- cbind(FNs[1], FNs[3], FNs[6])
FNss <- FNss[FNss$confidence == conf,]
FChipseq <- 0
Fnot_Chipseq <- 0
for (i in 1:nrow(FNss)){
TF <- FNss[i,1]
gene <- FNss[i,2]
tmp <- data[data$tf == TF,]
tmp <- tmp[tmp$target == gene,]
if (tmp[[5]] == "TRUE"){
FChipseq <- FChipseq + 1
}else{
Fnot_Chipseq <- Fnot_Chipseq + 1
}
}
FNs <- read.table("TPs", header = T)
FNss <- cbind(FNs[1], FNs[3], FNs[6])
FNss <- FNss[FNss$confidence == conf,]
TChipseq <- 0
Tnot_Chipseq <- 0
for (i in 1:nrow(FNss)){
TF <- FNss[i,1]
gene <- FNss[i,2]
tmp <- data[data$tf == TF,]
tmp <- tmp[tmp$target == gene,]
if (tmp[[5]] == "TRUE"){
TChipseq <- TChipseq + 1
}else{
Tnot_Chipseq <- Tnot_Chipseq + 1
}
}
pie.sales <- c(FChipseq)
pie.sales <- append(pie.sales, TChipseq)
names(pie.sales) <- c("FN", "TP")
pdf( paste(conf, "_Chipseq.pdf",sep=""), width=12, height=6 )
pie(pie.sales, main = paste(conf, "Chipseq", sep = ""))
dev.off()
pie.sales <- c(Fnot_Chipseq)
pie.sales <- append(pie.sales, Tnot_Chipseq)
names(pie.sales) <- c("FN", "TP")
pdf( paste(conf, "_notChipseq.pdf",sep=""), width=12, height=6 )
pie(pie.sales, main = paste(conf, "not_Chipseq", sep = ""))
dev.off()
}
# Chipseq有無におけるTP, FNの割合はどのくらいか？？
for (conf in c("A", "B", "C", "D")){
FNs <- read.table("FNs", header = T)
FNss <- cbind(FNs[1], FNs[3], FNs[6])
FNss <- FNss[FNss$confidence == conf,]
FChipseq <- 0
Fnot_Chipseq <- 0
for (i in 1:nrow(FNss)){
TF <- FNss[i,1]
gene <- FNss[i,2]
tmp <- data[data$tf == TF,]
tmp <- tmp[tmp$target == gene,]
if (tmp[[5]] == "TRUE"){
FChipseq <- FChipseq + 1
}else{
Fnot_Chipseq <- Fnot_Chipseq + 1
}
}
FNs <- read.table("TPs", header = T)
FNss <- cbind(FNs[1], FNs[3], FNs[6])
FNss <- FNss[FNss$confidence == conf,]
TChipseq <- 0
Tnot_Chipseq <- 0
for (i in 1:nrow(FNss)){
TF <- FNss[i,1]
gene <- FNss[i,2]
tmp <- data[data$tf == TF,]
tmp <- tmp[tmp$target == gene,]
if (tmp[[5]] == "TRUE"){
TChipseq <- TChipseq + 1
}else{
Tnot_Chipseq <- Tnot_Chipseq + 1
}
}
print(conf)
print(FChipseq)
print(Fnot_Chipseq)
print(TChipseq)
print(Tnot_Chipseq)
pie.sales <- c(FChipseq)
pie.sales <- append(pie.sales, TChipseq)
names(pie.sales) <- c("FN", "TP")
pdf( paste(conf, "_Chipseq.pdf",sep=""), width=12, height=6 )
pie(pie.sales, main = paste(conf, "Chipseq", sep = ""))
dev.off()
pie.sales <- c(Fnot_Chipseq)
pie.sales <- append(pie.sales, Tnot_Chipseq)
names(pie.sales) <- c("FN", "TP")
pdf( paste(conf, "_notChipseq.pdf",sep=""), width=12, height=6 )
pie(pie.sales, main = paste(conf, "not_Chipseq", sep = ""))
dev.off()
}
setwd("~")
source('~/attention.R')
source('~/attention.R')
source('~/attention.R')
source('~/attention.R')
source('~/attention.R')
source('~/attention.R')
source('~/attention.R')
source('~/attention.R')
source('~/attention.R')
source('~/attention.R')
source('~/attention.R')
source('~/attention.R')
source('~/attention.R')
source('~/attention.R')
source('~/attention.R')
source('~/attention.R')
source('~/attention.R')
source('~/attention.R')
source('~/attention.R')
source('~/attention.R')
source('~/attention.R')
source('~/attention.R')
source('~/attention.R')
source('~/attention.R')
source('~/attention.R')
source('~/attention.R')
source('~/attention.R')
source('~/attention.R')
source('~/attention.R')
source('~/attention.R')
source('~/attention.R')
source('~/attention.R')
source('~/attention.R')
source('~/attention.R')
source('~/attention.R')
source('~/attention.R')
source('~/attention.R')
source('~/attention.R')
source('~/attention.R')
source('~/attention.R')
source('~/attention.R')
source('~/attention.R')
source('~/attention.R')
source('~/attention.R')
source('~/attention.R')
source('~/attention.R')
source('~/attention.R')
source('~/attention.R')
source('~/attention.R')
source('~/attention.R')
source('~/attention.R')
source('~/attention.R')
setwd("~")
source('~/attention.R')
source('~/attention.R')
source('~/attention.R')
source('~/attention.R')
source('~/attention.R')
source('~/attention.R')
source('~/attention.R')
source('~/attention.R')
# START : Dependency Check
requiredPackage <- c("biomartr")
requiredPackage_BC <- c("biomaRt","Biostrings")
for( p in requiredPackage_BC ){
if( !( p %in% installed.packages( ))){
BiocManager::install( p )
}
}
for( p in requiredPackage ){
if( !(p %in% installed.packages())){
install.packages( p )
}
}
# EDN : Dependency Check
# START : Library Installation
library( biomartr )
remove.packages("biomartr")
install.packages("biomartr")
BiocManager::install( p )
# START : Library Installation
library( biomartr )
install.packages("biomartr")
# START : Library Installation
library( biomartr )
getwd()
setwd("~/m_thesis_okubo_code/1_make_Ans_datas/")
######### package #########
requiredPackage_BC <- c("Biostrings")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
for( p in requiredPackage_BC ){
if( !( p %in% installed.packages( ))){
BiocManager::install( p )
}
}
library(seqinr)
library(Biostrings)
#########################
#### パラメータの設定 ####
# input filename
#inputfile = ""
inputfile = "gene_edge.txt"
gff_file="new_gene_edge.txt"
genome_file="../GCF_000001405.39/genomes/GCF_000001405.39_genomic_refseq.fna"
# output filename
out_edge_file= "new_gene_edge.txt"
out_bp_file="upstream_10000bp"
# bp
bp = 1000
#########################
######### 関数 #########
reverse_RNA <- function(pre_mrna){
mrna <- rev(pre_mrna)
mrna <- gsub("A", "1", mrna)
mrna <- gsub("T", "2", mrna)
mrna <- gsub("G", "3", mrna)
mrna <- gsub("C", "4", mrna)
mrna <- gsub("1", "T", mrna)
mrna <- gsub("2", "A", mrna)
mrna <- gsub("3", "C", mrna)
mrna <- gsub("4", "G", mrna)
return(mrna)
}
#########################
#setwd("~/m1okubo/1_make_Ans_data/")  # この行は実際はいらない
setwd("./gene_gff/")
# ファイルの読み込み
f <- file(inputfile, "r")
lines <- readLines(con=f)
lines
data.list <- list()
for (i in 1:length(lines)) {
#読み込んだ行をコンマで分割して、ベクトル化
line.vec <- strsplit(lines[i], ",")
data.list <- c(data.list, line.vec)
}
setwd("~/m_thesis_okubo_code/1_make_Ans_datas/")
# input filename
inputfile = "ans_Data"
# output filename
outputfile = "../data/TF_bunpu"
data <- read.table(inputfile, header = T)  # データを読み込み
#### パラメータの設定 ####
# input filename
inputfile = "../data/ans_Data"
data <- read.table(inputfile, header = T)  # データを読み込み
data
data <- read.table(inputfile, header = F)  # データを読み込み
data <- read.table(inputfile, header = F)  # データを読み込み
data
#### パラメータの設定 ####
# input filename
inputfile = "./rename_tf"
data <- read.table(inputfile, header = T)  # データを読み込み
data
gene_protein_file = "./gene_gff/longestGene_proteinid.txt"
protein_seq_file = "./GCF_000001405.39/proteomes/GCF_000001405.39_protein_refseq.faa"
# スプライシングヴァリアントのうち最長のタンパク質のIDのリストを読み込む
longest <- read.table(gene_protein_file, header = F)
colnames(longest) <- c("tf_ID", "protein_ID")
# ヒトのタンパク質配列を読み込む
pseq <- read.fasta(protein_seq_file)
# 各TFの名前と長さをベクトルとして保存する
for (i in 1:nrow(TF_table)){
TF_name = TF_table[i,2]
longest_protein <- longest[longest$tf_ID == TF_name,]
protein <- longest_protein[1,2]
seq <- getSequence(pseq[protein], as.string = F)
length <- length(seq[[1]])
if(i == 1){
lengths<-c(length)
TF_names <- c(TF_name)
}else{
lengths <- append(lengths, length)
TF_names <- append(TF_names, TF_name)
}
}
TF_table <- read.table(inputfile, header = T)  # データを読み込み
# 各TFの名前と長さをベクトルとして保存する
for (i in 1:nrow(TF_table)){
TF_name = TF_table[i,2]
longest_protein <- longest[longest$tf_ID == TF_name,]
protein <- longest_protein[1,2]
seq <- getSequence(pseq[protein], as.string = F)
length <- length(seq[[1]])
if(i == 1){
lengths<-c(length)
TF_names <- c(TF_name)
}else{
lengths <- append(lengths, length)
TF_names <- append(TF_names, TF_name)
}
}
# ベクトルとして保存していたTFの名前と長さをデータフレームに変換する
TF_length <- data.frame("names" = TF_names, "length" = lengths)
TF_length
TF_length <- TF_length[order(TF_length$length),]
rownames(TF_length) <- 1:nrow(TF_length)
n = 150
index = 1
i <- 1
while(i <= nrow(TF_length)){
while(TF_length[i,2] < n && i <= nrow(TF_length)){
print(i)
print(TF_length[i, 2])
if(i == 1){
group<-c(index)
}else{
group <- append(group, index)
}
i <- i + 1
}
n <- n + cut_group
index <- index + 1
}
print("2")
# どのグループにいくつのTFが属するかを調べる
TF_length <- transform(TF_length, group = group)
write.table(TF_length, file = outputfile, quote=F, row.names = FALSE, col.names = FALSE)
######################################
TF_length
cut_group <- 50
n = 150
index = 1
i <- 1
while(i <= nrow(TF_length)){
while(TF_length[i,2] < n && i <= nrow(TF_length)){
print(i)
print(TF_length[i, 2])
if(i == 1){
group<-c(index)
}else{
group <- append(group, index)
}
i <- i + 1
}
n <- n + cut_group
index <- index + 1
}
group
# どのグループにいくつのTFが属するかを調べる
TF_length <- transform(TF_length, group = group)
TF_length
write.table(TF_length, file = outputfile, quote=F, row.names = FALSE, col.names = FALSE)
q()
